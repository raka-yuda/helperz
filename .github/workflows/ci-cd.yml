name: CI/CD

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      rollback_version:
        description: 'Version to rollback to (e.g., v1.2.3)'
        required: false
        type: string

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: helperz
  DEPLOY_PATH: /opt/helperz/app
  PROJECT_NAME: helperz

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - run: npm ci
    - run: npm run test

  build:
    needs: test
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build

  deploy:
    needs: [test, build]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Deploy Variables
      id: deploy-vars
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ ! -z "${{ github.event.inputs.rollback_version }}" ]; then
          echo "version=${{ github.event.inputs.rollback_version }}" >> $GITHUB_OUTPUT
          echo "is_rollback=true" >> $GITHUB_OUTPUT
        else
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "v0.0.0")
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH+1))"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "is_rollback=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and Tag Docker Image
      if: steps.deploy-vars.outputs.is_rollback == 'false'
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ steps.deploy-vars.outputs.version }} .
        docker tag ${{ env.DOCKER_IMAGE }}:${{ steps.deploy-vars.outputs.version }} ${{ env.DOCKER_IMAGE }}:latest

    - name: Create Git Tag
      if: steps.deploy-vars.outputs.is_rollback == 'false'
      run: |
        git tag ${{ steps.deploy-vars.outputs.version }}
        git push origin ${{ steps.deploy-vars.outputs.version }}

    - name: Create deployment script
      run: |
        cat > deploy.sh << 'SCRIPT'
        #!/bin/bash
        set -euo pipefail

        VERSION="$1"
        IS_ROLLBACK="$2"
        PROJECT_NAME="${{ env.PROJECT_NAME }}"
        DEPLOY_PATH="${{ env.DEPLOY_PATH }}"
        LOG_DIR="/opt/${PROJECT_NAME}/logs"
        LOG_FILE="$LOG_DIR/deploy_$(date +%Y%m%d_%H%M%S).log"

        mkdir -p "$LOG_DIR"

        log_message() {
          echo "$(date): $1" | tee -a "$LOG_FILE"
        }

        backup_current() {
          if [ -f docker-compose.yml ]; then
            cp docker-compose.yml "docker-compose.yml.backup"
            log_message "Backup created"
          fi
        }

        restore_backup() {
          if [ -f "docker-compose.yml.backup" ]; then
            log_message "Restoring from backup..."
            mv "docker-compose.yml.backup" docker-compose.yml
            docker-compose up -d
          fi
        }

        deploy_version() {
          local version="$1"
          log_message "Deploying version: $version"

          log_message "Pulling the latest changes"
          git pull origin main || log_message "Pulling the latest changes failed"

          log_message "Stopping and removing existing containers for ${PROJECT_NAME}"
          docker-compose -p ${PROJECT_NAME} down || log_message "No existing deployment to stop"
          
          log_message "Pruning unused Docker resources for ${PROJECT_NAME}"
          docker container prune -f --filter "label=com.docker.compose.project=$PROJECT_NAME" 
          docker network prune -f --filter "label=com.docker.compose.project=$PROJECT_NAME"

          log_message "Building and starting Docker containers"
          VERSION=$version docker-compose -p $PROJECT_NAME up --build -d || {
            log_message "Failed to start containers"
            return 1
          }
          
          log_message "Cleaning up old Docker images for ${PROJECT_NAME}"
          docker image prune -f --filter "label=com.docker.compose.project=$PROJECT_NAME"

          log_message "Reloading Nginx configuration for ${PROJECT_NAME}"
          sudo nginx -t && sudo nginx -s reload

          echo "$version" > current_version.txt
          log_message "Successfully deployed version: $version"
        }

        cd "$DEPLOY_PATH"
        backup_current

        if ! deploy_version "$VERSION"; then
          log_message "Deployment failed"
          if [ "$IS_ROLLBACK" != "true" ]; then
            log_message "Attempting to restore previous version"
            restore_backup
          fi
          exit 1
        fi

        tail -n 100 "$LOG_FILE"
        SCRIPT

    - name: Deploy to server
      env:
        HOST: ${{ secrets.HOST }}
        VERSION: ${{ steps.deploy-vars.outputs.version }}
        IS_ROLLBACK: ${{ steps.deploy-vars.outputs.is_rollback }}
        NODE_ENV: production
        NEXT_PUBLIC_UMAMI_WEBSITE_ID: ${{ secrets.UMAMI_WEBSITE_ID }}
        NEXT_PUBLIC_UMAMI_SCRIPT_URL: ${{ secrets.UMAMI_SCRIPT_URL }}
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
        echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config
        
        echo "NODE_ENV=$NODE_ENV" >> .env.production
        echo "NEXT_PUBLIC_UMAMI_WEBSITE_ID=$NEXT_PUBLIC_UMAMI_WEBSITE_ID" >> .env.production
        echo "NEXT_PUBLIC_UMAMI_SCRIPT_URL=$NEXT_PUBLIC_UMAMI_SCRIPT_URL" >> .env.production
        scp .env.production sp-deploy@$HOST:$DEPLOY_PATH || { echo "SCP failed"; exit 1; }

        scp deploy.sh sp-deploy@$HOST:${{ env.DEPLOY_PATH }}/
        ssh sp-deploy@$HOST "chmod +x ${{ env.DEPLOY_PATH }}/deploy.sh && \
          ${{ env.DEPLOY_PATH }}/deploy.sh $VERSION $IS_ROLLBACK"